{"name":"Pkg4j","tagline":"Java library for creating OS specific packages.","body":"# pkg4j\r\n\r\nJava library for create OS specific packages.\r\n\r\n## How to build\r\n\r\nThis project is uses [Gradle](http://gradle.org) as the build tool. For build you need clone source code and simply run one command. All magic will happed automatically.\r\n\r\n```shell\r\ngit clone git@github.com:jamel/pkg4j.git\r\ncd pkg4j\r\n./gradlew build\r\n```\r\n\r\n## Dependencies from your project\r\n\r\n### Maven dependency\r\n\r\nIf you are using [Maven](http://maven.apache.org) as build tool for your project, simply add this dependency to your pom.xml.\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.jamel.pkg4j</groupId>\r\n    <artifactId>pkg4j-core</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```\r\n\r\n### Gradle dependency\r\n\r\nFor [Gradle](http://gradle.org) projects it is even simpler. Make sure that your dependency block looks like:\r\n\r\n```groovy\r\ndependencies {\r\n   compile \"org.jamel.pkg4j:pkg4j-core:0.0.6\"\r\n   // ... other dependencies\r\n}\r\n```\r\n\r\n# Gradle packaging plugin\r\n\r\nThis plugin wil help you to build OS packages (.deb or .rpm) from Java (or Groovy, or Scala) sources.\r\n\r\n## Quick Start\r\nFor start using this plugin just include this lines in your [Gradle](http://gradle.org) build script.\r\n\r\n```groovy\r\n// Pull the plugin from Maven Central\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath \"org.jamel.pkg4j:pkg4j-gradle:0.0.6\"\r\n    }\r\n}\r\n\r\n// Invoke the plugin\r\napply plugin: 'pkg4j'\r\n\r\nversion = \"1.0.0\"\r\n\r\n// Provide information for build package\r\npkg {\r\n    name = \"my-supper-app\"\r\n    description = \"This is my Supper App.\"\r\n    changes = \"src/pkg/changes.txt\"\r\n\r\n    dirs {\r\n        create \"/var/cache/supper-app\", owner: \"app-user\"\r\n        pack dir: \"src/pkg/etc\", prefix: \"/etc\", mode: \"775\"\r\n        pack dir: \"src/pkg/bin\", prefix: \"/usr/lib/supper-app/bin\"\r\n        pack dir: \"build/libs\",  prefix: \"/usr/lib/supper-app/libs\"\r\n    }\r\n\r\n    depends {\r\n        on \"openjdk-6-jre | default-jre\"\r\n        on \"postfix (>= 2.7.0)\"\r\n    }\r\n\r\n    // generate installation scripts\r\n    postinst { exec \"update-rc.d supper-app defaults 90 20\" }\r\n    prerm    { exec \"update-rc.d -f supper-app remove\" }\r\n}\r\n```\r\n\r\nIn changes.txt you must provide release information. Something like this:\r\n\r\n```\r\nrelease date=15:00 03.14.2013,version=1.0.0\r\n * first stable release\r\nrelease date=14:00 03.01.2013,version=0.0.1\r\n * initial release\r\n```\r\n\r\nThen you can use buildDeb task:\r\n\r\n```shell\r\n./gradlew clean build buidlDeb\r\n```\r\n\r\n## Manually created installation scripts\r\n\r\nIf you need more complex installation scripts or preinst / postrm (which generation is not supported by the plugin) you can write them manually and specify from where to copy them:\r\n\r\n```groovy\r\npkg {\r\n\t...\r\n\r\n\t// note that installation scripts (preinst|postinst|prerm|postrm) found in this folder\r\n\t// will have priority over the scripts generated by plugin\r\n\tdeb { scripts \"src/pkg/debian\" }\r\n}\r\n```\r\n\r\n## Package with runtime dependencies\r\n\r\nIf you want build package which includes all your runtime dependencies you could use this snippet:\r\n\r\n```groovy\r\n// copy all runtime dependencies to build/libs folder\r\ntask copyLibs(type: Copy, dependsOn: \"build\") {\r\n    from configurations.runtime\r\n    into \"$buildDir/libs\"\r\n}\r\n\r\n// \"deb\" is shortcut name of buildDeb which invokes copyLibs before run\r\ntask deb(type: org.jamel.pkg4j.gradle.tasks.BuildDebTask, dependsOn: copyLibs)\r\n```\r\n\r\nThen for build deb package you can run this command:\r\n\r\n```shell\r\n./gradlew clean deb\r\n```","google":"UA-39578705-1","note":"Don't delete this file! It's used internally to help with page regeneration."}